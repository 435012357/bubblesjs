[{"id":12,"title":"API 索引","content":"#\n\n这里汇总 BubblesJS 提供的 API 能力：\n\n * @bubblesjs/utils\n   * getRequest(option): 返回 Axios 实例，并根据配置自动处理状态码、统一报错与未授权\n   * createRequest(option): 直接创建 Axios 实例，支持自定义拦截器\n\n更多包与 API 将持续更新～","routePath":"/bubblesjs/api/","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":13,"title":"指南","content":"#\n\n欢迎来到 BubblesJS 指南！这里将带你从 0 到 1 使用 BubblesJS：\n\n * 环境要求与安装\n * 使用 create-bubbles 创建项目（React / Vue）\n * 开发调试与预览\n * 生产构建与部署\n * 常见问题解答（FAQ）\n\n接下来，从“开始”小节走起吧～","routePath":"/bubblesjs/guide/","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":14,"title":"快速开始","content":"#\n\n\n环境要求#\n\n在开始之前，请确保你的开发环境满足以下要求：\n\n * Node.js: 版本 18 或更高版本\n * 包管理器: npm、yarn、pnpm 或 bun\n\n\n创建 BubblesJS 项目#\n\n使用 create-bubbles 脚手架工具来创建一个新项目：\n\n\n选择模板#\n\n运行命令后，会出现交互式提示，让你选择：\n\n 1. 框架选择: React 或 Vue\n 2. 构建工具: Rsbuild（推荐）或 Rolldown（实验性）\n 3. 代码检查: Biome 或 Oxc\n 4. 项目名称: 输入你的项目名称\n\n\n启动开发服务器#\n\n创建完成后，进入项目目录并启动开发服务器：\n\n\n\n现在你可以在浏览器中访问 http://localhost:3000 查看你的应用！\n\n\n项目结构#\n\n创建的项目包含以下核心文件和目录：\n\n\n\n\n下一步#\n\n * 📖 查看 包管理 了解可用的工具包\n * 🎨 查看 模板 了解不同的项目模板\n * 🛠️ 查看 API 了解详细的 API 文档","routePath":"/bubblesjs/guide/start/quick-start","lang":"zh","toc":[{"text":"环境要求","id":"环境要求","depth":2,"charIndex":3},{"text":"创建 BubblesJS 项目","id":"创建-bubblesjs-项目","depth":2,"charIndex":89},{"text":"选择模板","id":"选择模板","depth":2,"charIndex":142},{"text":"启动开发服务器","id":"启动开发服务器","depth":2,"charIndex":273},{"text":"项目结构","id":"项目结构","depth":2,"charIndex":353},{"text":"下一步","id":"下一步","depth":2,"charIndex":382}],"domain":"","frontmatter":{},"version":""},{"id":15,"title":"Hello World!","content":"#\n\n\nStart#\n\nWrite something to build your own docs! 🎁","routePath":"/bubblesjs/hello","lang":"zh","toc":[{"text":"Start","id":"start","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":17,"title":"包管理","content":"#\n\nBubblesJS 当前包含以下包：\n\n * @bubblesjs/request：基于 Alova 的现代化请求库，提供完整的请求封装与响应处理\n * @bubblesjs/utils：实用工具函数集合，包含通用工具方法\n * create-bubbles：项目脚手架，支持 React/Vue 与多种构建模板\n\n\n包简介#\n\n\n@bubblesjs/request#\n\n现代化的请求库，基于 Alova 构建，提供：\n\n * 统一的请求和响应处理\n * 灵活的错误处理机制\n * 支持多种适配器（fetch、axios等）\n * 双重调用模式支持\n\n\n@bubblesjs/utils#\n\n实用工具函数集合：\n\n * 通用工具函数\n * 类型工具\n * 辅助方法\n\n\ncreate-bubbles#\n\n快速创建项目脚手架：\n\n * React + Rsbuild + Biome 模板\n * Vue + Rsbuild + Biome 模板\n * Vue + Rolldown + Oxc 模板（注：使用 Rolldown 替代标准 Vite）\n\n你可以在左侧导航中进入各包的详细说明。","routePath":"/bubblesjs/packages/","lang":"zh","toc":[{"text":"包简介","id":"包简介","depth":2,"charIndex":161},{"text":"@bubblesjs/request","id":"bubblesjsrequest","depth":3,"charIndex":168},{"text":"@bubblesjs/utils","id":"bubblesjsutils","depth":3,"charIndex":280},{"text":"create-bubbles","id":"create-bubbles","depth":3,"charIndex":338}],"domain":"","frontmatter":{},"version":""},{"id":18,"title":"@bubblesjs/request","content":"#\n\n基于 Alova 的现代化请求库，提供统一的请求和响应处理机制，支持多种适配器和灵活的配置选项。\n\n\n特性#\n\n * 🚀 现代化设计：基于 Alova 构建，支持声明式请求和响应式特性\n * 🛠️ 灵活配置：支持全局配置和运行时动态配置\n * 🔄 双重调用模式：支持默认实例和动态配置实例\n * 📝 TypeScript：完整的类型支持\n * 🎯 智能错误处理：统一的错误处理和消息提示机制\n * 🔌 多适配器支持：支持 fetch、axios 等多种请求适配器\n\n\n安装#\n\n\n快速开始#\n\n\n基础使用#\n\n\n\n\n双重调用模式#\n\n\n\n\nAPI 文档#\n\n\ncreateInstance(option)#\n\n创建一个标准的 Alova 请求实例。\n\n参数#\n\n * option: requestOption - 配置选项\n\n配置选项#\n\n参数                         类型                                        默认值                                     说明\nbaseUrl                    string                                    '/'                                     基础 URL\ntimeout                    number                                    0                                       超时时间（毫秒），0 表示无超时\ncommonHeaders              Record<string, string | (() => string)>   {}                                      公共请求头，支持函数动态获取\nstatusMap                  statusMap                                 {success: 200, unAuthorized: 401}       HTTP 状态码映射\ncodeMap                    codeMap                                   {success: [200], unAuthorized: [401]}   业务状态码映射\nresponseDataKey            string                                    'data'                                  响应数据字段名\nresponseMessageKey         string                                    'message'                               响应消息字段名\nisTransformResponse        boolean                                   true                                    是否启用响应转换\nisShowSuccessMessage       boolean                                   false                                   是否显示成功消息\nsuccessDefaultMessage      string                                    '操作成功'                                  默认成功消息\nisShowErrorMessage         boolean                                   true                                    是否显示错误消息\nerrorDefaultMessage        string                                    '服务异常'                                  默认错误消息\nsuccessMessageFunc         (message: string) => void                 undefined                               成功消息处理函数\nerrorMessageFunc           (message: string) => void                 undefined                               错误消息处理函数\nunAuthorizedResponseFunc   () => void                                undefined                               未授权处理函数\nrequestAdapter             AlovaRequestAdapter                       adapterFetch()                          请求适配器\nstatesHook                 StatesHook                                undefined                               状态钩子（用于框架集成）\n\n返回值#\n\n返回配置好的 Alova 实例，支持以下 HTTP 方法：\n\n * Get(url, config?)\n * Post(url, config?)\n * Put(url, config?)\n * Delete(url, config?)\n * Patch(url, config?)\n * Head(url, config?)\n * Options(url, config?)\n\n\ncreateDualCallInstance(baseConfig)#\n\n创建支持双重调用模式的请求实例工厂。\n\n参数#\n\n * baseConfig: baseRequestOption<AlovaGenerics> - 基础配置\n\n返回值#\n\n返回一个函数，该函数：\n\n 1. 无参数调用时返回默认实例\n 2. 传入 CustomConfig 时返回合并配置后的新实例\n 3. 直接绑定了所有 HTTP 方法到默认实例\n\n\n\n\n使用场景#\n\n\n1. 基础项目配置#\n\n\n\n\n2. 带认证的请求#\n\n\n\n\n3. 业务特定配置#\n\n\n\n\n4. 文件上传配置#\n\n\n\n\n5. 不同环境配置#\n\n\n\n\n高级用法#\n\n\n1. 自定义适配器#\n\n\n\n\n2. 响应拦截和数据转换#\n\n\n\n\n3. 集成 React/Vue 状态管理#\n\n\n\n\n错误处理#\n\n\n错误处理流程#\n\n 1. HTTP 状态码检查：首先检查 HTTP 状态码是否为成功状态\n 2. 业务状态码检查：然后检查响应体中的业务状态码\n 3. 未授权处理：特殊处理未授权情况\n 4. 错误消息显示：根据配置显示错误消息\n\n\n自定义错误处理#\n\n\n\n\n类型定义#\n\n\n\n\n最佳实践#\n\n\n1. 统一错误处理#\n\n\n\n\n2. 模块化请求配置#\n\n\n\n\n3. 类型安全的 API 调用#\n\n\n\n\n迁移指南#\n\n\n从 Axios 迁移#\n\n如果你之前使用原生 Axios，可以这样迁移：\n\n\n\n\n从其他请求库迁移#\n\n@bubblesjs/request 提供了灵活的适配器系统，可以轻松集成现有的请求解决方案。\n\n\n常见问题#\n\n\nQ: 如何处理文件下载？#\n\nA: 可以通过设置 isTransformResponse: false 来获取完整响应：\n\n\n\n\nQ: 如何实现请求重试？#\n\nA: 可以结合 Alova 的重试功能：\n\n\n\n\nQ: 如何实现请求缓存？#\n\nA: Alova 内置了强大的缓存功能：\n\n\n\n\nQ: 如何集成 Loading 状态？#\n\nA: 使用 Alova 的状态钩子功能：\n\n\n\n\n总结#\n\n@bubblesjs/request 提供了现代化、类型安全、功能丰富的请求解决方案。通过灵活的配置选项和双重调用模式，可以满足从简单到复杂的各种请求场景需求。","routePath":"/bubblesjs/packages/request","lang":"zh","toc":[{"text":"特性","id":"特性","depth":2,"charIndex":53},{"text":"安装","id":"安装","depth":2,"charIndex":242},{"text":"快速开始","id":"快速开始","depth":2,"charIndex":248},{"text":"基础使用","id":"基础使用","depth":3,"charIndex":256},{"text":"双重调用模式","id":"双重调用模式","depth":3,"charIndex":266},{"text":"API 文档","id":"api-文档","depth":2,"charIndex":278},{"text":"createInstance(option)","id":"createinstanceoption","depth":3,"charIndex":288},{"text":"参数","id":"参数","depth":4,"charIndex":334},{"text":"配置选项","id":"配置选项","depth":4,"charIndex":372},{"text":"返回值","id":"返回值","depth":4,"charIndex":2505},{"text":"createDualCallInstance(baseConfig)","id":"createdualcallinstancebaseconfig","depth":3,"charIndex":2702},{"text":"参数","id":"参数-1","depth":4,"charIndex":2759},{"text":"返回值","id":"返回值-1","depth":4,"charIndex":2820},{"text":"使用场景","id":"使用场景","depth":2,"charIndex":2918},{"text":"1. 基础项目配置","id":"1-基础项目配置","depth":3,"charIndex":2926},{"text":"2. 带认证的请求","id":"2-带认证的请求","depth":3,"charIndex":2941},{"text":"3. 业务特定配置","id":"3-业务特定配置","depth":3,"charIndex":2956},{"text":"4. 文件上传配置","id":"4-文件上传配置","depth":3,"charIndex":2971},{"text":"5. 不同环境配置","id":"5-不同环境配置","depth":3,"charIndex":2986},{"text":"高级用法","id":"高级用法","depth":2,"charIndex":3001},{"text":"1. 自定义适配器","id":"1-自定义适配器","depth":3,"charIndex":3009},{"text":"2. 响应拦截和数据转换","id":"2-响应拦截和数据转换","depth":3,"charIndex":3024},{"text":"3. 集成 React/Vue 状态管理","id":"3-集成-reactvue-状态管理","depth":3,"charIndex":3042},{"text":"错误处理","id":"错误处理","depth":2,"charIndex":3068},{"text":"错误处理流程","id":"错误处理流程","depth":3,"charIndex":3076},{"text":"自定义错误处理","id":"自定义错误处理","depth":3,"charIndex":3192},{"text":"类型定义","id":"类型定义","depth":2,"charIndex":3205},{"text":"最佳实践","id":"最佳实践","depth":2,"charIndex":3215},{"text":"1. 统一错误处理","id":"1-统一错误处理","depth":3,"charIndex":3223},{"text":"2. 模块化请求配置","id":"2-模块化请求配置","depth":3,"charIndex":3238},{"text":"3. 类型安全的 API 调用","id":"3-类型安全的-api-调用","depth":3,"charIndex":3254},{"text":"迁移指南","id":"迁移指南","depth":2,"charIndex":3275},{"text":"从 Axios 迁移","id":"从-axios-迁移","depth":3,"charIndex":3283},{"text":"从其他请求库迁移","id":"从其他请求库迁移","depth":3,"charIndex":3324},{"text":"常见问题","id":"常见问题","depth":2,"charIndex":3385},{"text":"Q: 如何处理文件下载？","id":"q-如何处理文件下载","depth":3,"charIndex":3393},{"text":"Q: 如何实现请求重试？","id":"q-如何实现请求重试","depth":3,"charIndex":3458},{"text":"Q: 如何实现请求缓存？","id":"q-如何实现请求缓存","depth":3,"charIndex":3498},{"text":"Q: 如何集成 Loading 状态？","id":"q-如何集成-loading-状态","depth":3,"charIndex":3538},{"text":"总结","id":"总结","depth":2,"charIndex":3585}],"domain":"","frontmatter":{},"version":""},{"id":19,"title":"@bubblesjs/utils","content":"#\n\n提供实用的工具函数集合，包含通用工具方法和类型工具。\n\n\n安装#\n\n\n快速使用#\n\n\n\n\nAPI 文档#\n\n\n通用工具函数#\n\ndeepMergeObject(target, source)#\n\n深度合并两个对象，支持嵌套对象的递归合并。\n\n参数：\n\n * target: object - 目标对象\n * source: object - 源对象\n\n返回值：\n\n * object - 合并后的新对象\n\n示例：\n\n\n\n注意事项：\n\n * 数组会被整体替换，不会进行元素级合并\n * 函数、Date、RegExp 等特殊对象会被直接赋值\n * 源对象的属性会覆盖目标对象的同名属性\n\nisReadableStream(obj)#\n\n检查对象是否为可读流（ReadableStream）。\n\n参数：\n\n * obj: any - 要检查的对象\n\n返回值：\n\n * boolean - 如果是可读流返回 true，否则返回 false\n\n示例：\n\n\n\n使用场景：\n\n * 区分不同类型的响应体\n * 条件性地处理流式数据\n * 适配器兼容性检查\n\n\n使用场景#\n\n\n1. 配置对象合并#\n\n\n\n\n2. 响应处理适配#\n\n\n\n\n3. 组件属性合并#\n\n\n\n\n类型定义#\n\n\n\n\n实现原理#\n\n\ndeepMergeObject 实现原理#\n\n 1. 递归合并：对于对象类型的属性，递归调用合并函数\n 2. 类型检查：区分普通对象、数组、函数等不同类型\n 3. 安全复制：避免引用共享，确保合并后的对象独立\n\n\nisReadableStream 实现原理#\n\n 1. 类型检查：检查对象是否存在且为对象类型\n 2. 特征检测：检查是否具有 ReadableStream 的特征属性和方法\n 3. 兼容性：支持不同环境下的 ReadableStream 实现\n\n\n最佳实践#\n\n\n1. 配置管理#\n\n\n\n\n2. 响应适配器#\n\n\n\n\n3. 工具函数组合#\n\n\n\n\n常见问题#\n\n\nQ: deepMergeObject 会修改原对象吗？#\n\nA: 不会。deepMergeObject 会创建一个新对象，不会修改传入的原对象。\n\n\n\n\nQ: 如何处理数组合并？#\n\nA: 当前实现中，数组会被整体替换。如果需要数组元素合并，可以自定义处理：\n\n\n\n\nQ: isReadableStream 支持哪些环境？#\n\nA: 支持现代浏览器和 Node.js 环境中的 ReadableStream。对于不支持的环境，会安全地返回 false。\n\n\n总结#\n\n@bubblesjs/utils 提供了实用的工具函数，特别适合以下场景：\n\n * 配置管理：使用 deepMergeObject 进行灵活的配置合并\n * 响应处理：使用 isReadableStream 适配不同的响应类型\n * 数据处理：在各种数据操作场景中提供可靠的工具支持\n\n这些工具函数经过充分测试，可以安全地用于生产环境。","routePath":"/bubblesjs/packages/utils","lang":"zh","toc":[{"text":"安装","id":"安装","depth":2,"charIndex":31},{"text":"快速使用","id":"快速使用","depth":2,"charIndex":37},{"text":"API 文档","id":"api-文档","depth":2,"charIndex":47},{"text":"通用工具函数","id":"通用工具函数","depth":3,"charIndex":57},{"text":"deepMergeObject(target, source)","id":"deepmergeobjecttarget-source","depth":4,"charIndex":66},{"text":"isReadableStream(obj)","id":"isreadablestreamobj","depth":4,"charIndex":294},{"text":"使用场景","id":"使用场景","depth":2,"charIndex":475},{"text":"1. 配置对象合并","id":"1-配置对象合并","depth":3,"charIndex":483},{"text":"2. 响应处理适配","id":"2-响应处理适配","depth":3,"charIndex":498},{"text":"3. 组件属性合并","id":"3-组件属性合并","depth":3,"charIndex":513},{"text":"类型定义","id":"类型定义","depth":2,"charIndex":528},{"text":"实现原理","id":"实现原理","depth":2,"charIndex":538},{"text":"deepMergeObject 实现原理","id":"deepmergeobject-实现原理","depth":3,"charIndex":546},{"text":"isReadableStream 实现原理","id":"isreadablestream-实现原理","depth":3,"charIndex":653},{"text":"最佳实践","id":"最佳实践","depth":2,"charIndex":778},{"text":"1. 配置管理","id":"1-配置管理","depth":3,"charIndex":786},{"text":"2. 响应适配器","id":"2-响应适配器","depth":3,"charIndex":799},{"text":"3. 工具函数组合","id":"3-工具函数组合","depth":3,"charIndex":813},{"text":"常见问题","id":"常见问题","depth":2,"charIndex":828},{"text":"Q: deepMergeObject 会修改原对象吗？","id":"q-deepmergeobject-会修改原对象吗","depth":3,"charIndex":836},{"text":"Q: 如何处理数组合并？","id":"q-如何处理数组合并","depth":3,"charIndex":913},{"text":"Q: isReadableStream 支持哪些环境？","id":"q-isreadablestream-支持哪些环境","depth":3,"charIndex":970},{"text":"总结","id":"总结","depth":2,"charIndex":1065}],"domain":"","frontmatter":{},"version":""},{"id":20,"title":"模板总览","content":"#\n\ncreate-bubbles 提供以下项目模板，帮助你快速启动：\n\n * React + Rsbuild + Biome（推荐）\n * Vue + Rsbuild + Biome\n * Vue + Rolldown + Oxc（实验性，使用 Rolldown 替代 Vite）\n\n\n模板选择指南#\n\n * 选择 React + Rsbuild + Biome：适合 React 项目，提供稳定的开发体验\n * 选择 Vue + Rsbuild + Biome：适合 Vue 项目，追求稳定构建性能\n * 选择 Vue + Rolldown + Oxc：适合追求极致构建速度和前沿技术的项目\n\n点击左侧导航查看对应模板的使用说明与特性。","routePath":"/bubblesjs/templates/","lang":"zh","toc":[{"text":"模板选择指南","id":"模板选择指南","depth":2,"charIndex":143}],"domain":"","frontmatter":{},"version":""},{"id":21,"title":"React + Rsbuild 模板","content":"#\n\n该模板预置：\n\n * @rsbuild/core + @rsbuild/plugin-react\n * UnoCSS、Sass、SVGR\n * 自动导入（react、react-router）\n\n\n启动#\n\n\n\n\n重要文件#\n\n * rsbuild.config.ts：构建配置\n * src/router/index.tsx：路由配置\n * src/layout/default：基础布局","routePath":"/bubblesjs/templates/react-rsbuild","lang":"zh","toc":[{"text":"启动","id":"启动","depth":2,"charIndex":101},{"text":"重要文件","id":"重要文件","depth":2,"charIndex":109}],"domain":"","frontmatter":{},"version":""},{"id":22,"title":"Vue + Rolldown + Oxc 模板（实验性）","content":"#\n\n该模板集成了 Rolldown 与 Oxc，追求更快的构建与更强的静态分析能力。\n\n\n技术栈#\n\n * Rolldown：Vite 的 Rust 实现，替代标准 Vite\n * Oxc：基于 Rust 的高性能代码检查工具\n * Vue 3 + TypeScript：现代化 Vue 开发体验\n * Element Plus + UnoCSS：UI 组件库与原子化 CSS\n\n\n重要说明#\n\n该模板使用 vite.config.ts 配置文件，但实际使用的是 Rolldown 构建工具（通过 \"vite\":\n\"npm:rolldown-vite@latest\" 替换）。\n\n\n启动#\n\n\n\n\n注意#\n\n此模板为实验性质，生态兼容性与稳定性可能略逊于 Rsbuild/标准 Vite，请按需选择。","routePath":"/bubblesjs/templates/vue-rolldown-oxlint","lang":"zh","toc":[{"text":"技术栈","id":"技术栈","depth":2,"charIndex":45},{"text":"重要说明","id":"重要说明","depth":2,"charIndex":191},{"text":"启动","id":"启动","depth":2,"charIndex":291},{"text":"注意","id":"注意","depth":2,"charIndex":299}],"domain":"","frontmatter":{},"version":""},{"id":23,"title":"Vue + Rsbuild 模板","content":"#\n\n该模板预置：\n\n * @rsbuild/core + @rsbuild/plugin-vue\n * UnoCSS、Sass\n * 自动导入（vue、vue-router）\n\n\n启动#\n\n\n\n\n重要文件#\n\n * rsbuild.config.ts：构建配置\n * src/router：路由配置与入口\n * src/layout：基础布局","routePath":"/bubblesjs/templates/vue-rsbuild","lang":"zh","toc":[{"text":"启动","id":"启动","depth":2,"charIndex":90},{"text":"重要文件","id":"重要文件","depth":2,"charIndex":98}],"domain":"","frontmatter":{},"version":""}]