"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["963"],{3109:function(e,n,s){s.r(n),s.d(n,{default:()=>o});var r=s(651),a=s(6971),t=s(6755);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code",h3:"h3",h4:"h4",strong:"strong",ul:"ul",li:"li"},(0,a.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"bubblesjsutils",children:["@bubblesjs/utils",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#bubblesjsutils",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Utility function collection containing common helper methods and type utilities."}),"\n",(0,r.jsxs)(n.h2,{id:"installation",children:["Installation",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#installation",children:"#"})]}),"\n","\n",(0,r.jsxs)(t.mQ,{children:[(0,r.jsx)(t.OK,{label:"pnpm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pnpm add @bubblesjs/utils\n"})})}),(0,r.jsx)(t.OK,{label:"npm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install @bubblesjs/utils\n"})})}),(0,r.jsx)(t.OK,{label:"yarn",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"yarn add @bubblesjs/utils\n"})})}),(0,r.jsx)(t.OK,{label:"bun",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bun add @bubblesjs/utils\n"})})})]}),"\n",(0,r.jsxs)(n.h2,{id:"quick-usage",children:["Quick Usage",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#quick-usage",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { deepMergeObject, isReadableStream } from '@bubblesjs/utils'\n\n// Deep merge objects\nconst merged = deepMergeObject(\n  { a: 1, b: { c: 2 } },\n  { b: { d: 3 }, e: 4 }\n)\n// Result: { a: 1, b: { c: 2, d: 3 }, e: 4 }\n\n// Check if it's a readable stream\nconst isStream = isReadableStream(response.body)\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"api-documentation",children:["API Documentation",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#api-documentation",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"utility-functions",children:["Utility Functions",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#utility-functions",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"deepmergeobjecttarget-source",children:["deepMergeObject(target, source)",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#deepmergeobjecttarget-source",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Deep merge two objects, supporting recursive merging of nested objects."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"target"}),": ",(0,r.jsx)(n.code,{children:"object"})," - Target object"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"source"}),": ",(0,r.jsx)(n.code,{children:"object"})," - Source object"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Return Value:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"object"})," - New merged object"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { deepMergeObject } from '@bubblesjs/utils'\n\nconst target = {\n  user: {\n    name: 'Alice',\n    settings: {\n      theme: 'light'\n    }\n  },\n  version: '1.0.0'\n}\n\nconst source = {\n  user: {\n    age: 25,\n    settings: {\n      language: 'en-US'\n    }\n  },\n  features: ['dark-mode']\n}\n\nconst result = deepMergeObject(target, source)\n// Result:\n// {\n//   user: {\n//     name: 'Alice',\n//     age: 25,\n//     settings: {\n//       theme: 'light',\n//       language: 'en-US'\n//     }\n//   },\n//   version: '1.0.0',\n//   features: ['dark-mode']\n// }\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Arrays are replaced entirely, not merged at element level"}),"\n",(0,r.jsx)(n.li,{children:"Special objects like functions, Date, RegExp are assigned directly"}),"\n",(0,r.jsx)(n.li,{children:"Source object properties override target object properties with the same name"}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"isreadablestreamobj",children:["isReadableStream(obj)",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isreadablestreamobj",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Checks if an object is a ReadableStream."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"obj"}),": ",(0,r.jsx)(n.code,{children:"any"})," - Object to check"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Return Value:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"boolean"})," - Returns true if it's a readable stream, false otherwise"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { isReadableStream } from '@bubblesjs/utils'\n\n// Check fetch response body\nconst response = await fetch('/api/data')\nif (isReadableStream(response.body)) {\n  // Handle stream response\n  const data = await response.json()\n} else {\n  // Handle regular response\n  const data = response.body\n}\n\n// Check custom stream\nconst customStream = new ReadableStream({\n  start(controller) {\n    controller.enqueue('Hello')\n    controller.close()\n  }\n})\n\nconsole.log(isReadableStream(customStream)) // true\nconsole.log(isReadableStream({})) // false\nconsole.log(isReadableStream(null)) // false\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use Cases:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Distinguish different types of response bodies"}),"\n",(0,r.jsx)(n.li,{children:"Conditionally handle stream data"}),"\n",(0,r.jsx)(n.li,{children:"Adapter compatibility checks"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"use-cases",children:["Use Cases",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#use-cases",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"1-configuration-object-merging",children:["1. Configuration Object Merging",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-configuration-object-merging",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { deepMergeObject } from '@bubblesjs/utils'\n\n// Default configuration\nconst defaultConfig = {\n  api: {\n    baseUrl: '/api',\n    timeout: 5000\n  },\n  ui: {\n    theme: 'light',\n    language: 'en'\n  }\n}\n\n// User configuration\nconst userConfig = {\n  api: {\n    timeout: 10000\n  },\n  ui: {\n    theme: 'dark'\n  }\n}\n\n// Merge configuration\nconst finalConfig = deepMergeObject(defaultConfig, userConfig)\n// Result preserves all default settings while applying user overrides\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"2-response-handling-adaptation",children:["2. Response Handling Adaptation",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-response-handling-adaptation",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { isReadableStream } from '@bubblesjs/utils'\n\nconst handleResponse = async (response) => {\n  // Handle different response body types\n  if (response?.body && isReadableStream(response.body)) {\n    // Fetch API stream response\n    return await response.json()\n  } else {\n    // Other adapter direct response\n    return response.data\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"3-component-property-merging",children:["3. Component Property Merging",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-component-property-merging",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { deepMergeObject } from '@bubblesjs/utils'\n\n// React component example\nconst Button = ({ className, style, ...props }) => {\n  const defaultStyle = {\n    padding: '8px 16px',\n    border: 'none',\n    borderRadius: '4px'\n  }\n  \n  const mergedStyle = deepMergeObject(defaultStyle, style || {})\n  \n  return (\n    <button \n      className={`btn ${className || ''}`}\n      style={mergedStyle}\n      {...props}\n    />\n  )\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"type-definitions",children:["Type Definitions",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#type-definitions",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Deep merge function type\nfunction deepMergeObject<T extends object, U extends object>(\n  target: T,\n  source: U\n): T & U\n\n// Readable stream check function type\nfunction isReadableStream(obj: any): obj is ReadableStream\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"best-practices",children:["Best Practices",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#best-practices",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"1-configuration-management",children:["1. Configuration Management",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-configuration-management",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { deepMergeObject } from '@bubblesjs/utils'\n\nclass ConfigManager {\n  private defaultConfig: Record<string, any>\n  \n  constructor(defaultConfig: Record<string, any>) {\n    this.defaultConfig = defaultConfig\n  }\n  \n  merge(userConfig: Record<string, any>) {\n    return deepMergeObject(this.defaultConfig, userConfig)\n  }\n  \n  // Support multi-layer merging\n  mergeMultiple(...configs: Record<string, any>[]) {\n    return configs.reduce(\n      (acc, config) => deepMergeObject(acc, config),\n      this.defaultConfig\n    )\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"2-response-adapter",children:["2. Response Adapter",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-response-adapter",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { isReadableStream } from '@bubblesjs/utils'\n\nclass ResponseAdapter {\n  static async parse(response: any) {\n    // Unified response parsing logic\n    if (response?.body && isReadableStream(response.body)) {\n      try {\n        return await response.json()\n      } catch (error) {\n        return await response.text()\n      }\n    }\n    \n    return response.data || response\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"3-utility-function-combination",children:["3. Utility Function Combination",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-utility-function-combination",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { deepMergeObject, isReadableStream } from '@bubblesjs/utils'\n\n// Create a general data processing tool\nconst createDataProcessor = (defaultOptions = {}) => {\n  return {\n    process: async (data: any, options = {}) => {\n      const mergedOptions = deepMergeObject(defaultOptions, options)\n      \n      if (isReadableStream(data)) {\n        // Handle stream data\n        const reader = data.getReader()\n        // ... stream processing logic\n      }\n      \n      // Handle regular data\n      return processWithOptions(data, mergedOptions)\n    }\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"faq",children:["FAQ",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#faq",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"q-does-deepmergeobject-modify-the-original-objects",children:["Q: Does deepMergeObject modify the original objects?",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#q-does-deepmergeobject-modify-the-original-objects",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["A: No. ",(0,r.jsx)(n.code,{children:"deepMergeObject"})," creates a new object and doesn't modify the input objects."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const original = { a: 1, b: { c: 2 } }\nconst source = { b: { d: 3 } }\nconst result = deepMergeObject(original, source)\n\nconsole.log(original) // { a: 1, b: { c: 2 } } - unchanged\nconsole.log(result)   // { a: 1, b: { c: 2, d: 3 } } - new object\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"q-how-to-handle-array-merging",children:["Q: How to handle array merging?",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#q-how-to-handle-array-merging",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"A: The current implementation replaces arrays entirely. If you need element-level array merging, you can customize the handling:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const customMerge = (target, source) => {\n  const result = deepMergeObject(target, source)\n  \n  // Custom array merging logic\n  if (Array.isArray(target.items) && Array.isArray(source.items)) {\n    result.items = [...target.items, ...source.items]\n  }\n  \n  return result\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"q-which-environments-does-isreadablestream-support",children:["Q: Which environments does isReadableStream support?",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#q-which-environments-does-isreadablestream-support",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"A: Supports ReadableStream in modern browsers and Node.js environments. For unsupported environments, it safely returns false."}),"\n",(0,r.jsxs)(n.h2,{id:"summary",children:["Summary",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#summary",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"@bubblesjs/utils provides practical utility functions, particularly suitable for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuration Management"}),": Use ",(0,r.jsx)(n.code,{children:"deepMergeObject"})," for flexible configuration merging"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Response Handling"}),": Use ",(0,r.jsx)(n.code,{children:"isReadableStream"})," to adapt different response types"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Processing"}),": Provide reliable tool support in various data manipulation scenarios"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"These utility functions are thoroughly tested and can be safely used in production environments."})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}let o=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["en%2Fpackages%2Futils.mdx"]={toc:[{text:"Installation",id:"installation",depth:2},{text:"Quick Usage",id:"quick-usage",depth:2},{text:"API Documentation",id:"api-documentation",depth:2},{text:"Utility Functions",id:"utility-functions",depth:3},{text:"deepMergeObject(target, source)",id:"deepmergeobjecttarget-source",depth:4},{text:"isReadableStream(obj)",id:"isreadablestreamobj",depth:4},{text:"Use Cases",id:"use-cases",depth:2},{text:"1. Configuration Object Merging",id:"1-configuration-object-merging",depth:3},{text:"2. Response Handling Adaptation",id:"2-response-handling-adaptation",depth:3},{text:"3. Component Property Merging",id:"3-component-property-merging",depth:3},{text:"Type Definitions",id:"type-definitions",depth:2},{text:"Best Practices",id:"best-practices",depth:2},{text:"1. Configuration Management",id:"1-configuration-management",depth:3},{text:"2. Response Adapter",id:"2-response-adapter",depth:3},{text:"3. Utility Function Combination",id:"3-utility-function-combination",depth:3},{text:"FAQ",id:"faq",depth:2},{text:"Q: Does deepMergeObject modify the original objects?",id:"q-does-deepmergeobject-modify-the-original-objects",depth:3},{text:"Q: How to handle array merging?",id:"q-how-to-handle-array-merging",depth:3},{text:"Q: Which environments does isReadableStream support?",id:"q-which-environments-does-isreadablestream-support",depth:3},{text:"Summary",id:"summary",depth:2}],title:"@bubblesjs/utils",headingTitle:"@bubblesjs/utils",frontmatter:{}}}}]);