"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["117"],{543:function(e,n,s){s.r(n),s.d(n,{default:()=>i});var r=s(651),a=s(6971),t=s(5708);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",ul:"ul",li:"li",strong:"strong",pre:"pre",code:"code",h3:"h3",h4:"h4",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",ol:"ol"},(0,a.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"bubblesjsrequest",children:["@bubblesjs/request",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#bubblesjsrequest",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"基于 Alova 的现代化请求库，提供统一的请求和响应处理机制，支持多种适配器和灵活的配置选项。"}),"\n",(0,r.jsxs)(n.h2,{id:"特性",children:["特性",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#特性",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\uD83D\uDE80 ",(0,r.jsx)(n.strong,{children:"现代化设计"}),"：基于 Alova 构建，支持声明式请求和响应式特性"]}),"\n",(0,r.jsxs)(n.li,{children:["\uD83D\uDEE0️ ",(0,r.jsx)(n.strong,{children:"灵活配置"}),"：支持全局配置和运行时动态配置"]}),"\n",(0,r.jsxs)(n.li,{children:["\uD83D\uDD04 ",(0,r.jsx)(n.strong,{children:"双重调用模式"}),"：支持默认实例和动态配置实例"]}),"\n",(0,r.jsxs)(n.li,{children:["\uD83D\uDCDD ",(0,r.jsx)(n.strong,{children:"TypeScript"}),"：完整的类型支持"]}),"\n",(0,r.jsxs)(n.li,{children:["\uD83C\uDFAF ",(0,r.jsx)(n.strong,{children:"智能错误处理"}),"：统一的错误处理和消息提示机制"]}),"\n",(0,r.jsxs)(n.li,{children:["\uD83D\uDD0C ",(0,r.jsx)(n.strong,{children:"多适配器支持"}),"：支持 fetch、axios 等多种请求适配器"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"安装",children:["安装",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装",children:"#"})]}),"\n","\n",(0,r.jsxs)(t.mQ,{children:[(0,r.jsx)(t.OK,{label:"pnpm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pnpm add @bubblesjs/request alova\n"})})}),(0,r.jsx)(t.OK,{label:"npm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install @bubblesjs/request alova\n"})})}),(0,r.jsx)(t.OK,{label:"yarn",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"yarn add @bubblesjs/request alova\n"})})}),(0,r.jsx)(t.OK,{label:"bun",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bun add @bubblesjs/request alova\n"})})})]}),"\n",(0,r.jsxs)(n.h2,{id:"快速开始",children:["快速开始",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#快速开始",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"基础使用",children:["基础使用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基础使用",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { createInstance } from '@bubblesjs/request';\n\n// 创建请求实例\nconst request = createInstance({\n  baseUrl: '/api',\n  commonHeaders: {\n    'Content-Type': 'application/json',\n    Authorization: () => `Bearer ${localStorage.getItem('token') || ''}`,\n  },\n  successMessageFunc: (msg) => {\n    console.log('✅ 成功:', msg);\n  },\n  errorMessageFunc: (msg) => {\n    console.error('❌ 错误:', msg);\n  },\n  unAuthorizedResponseFunc: () => {\n    // 处理未授权，例如跳转到登录页\n    window.location.href = '/login';\n  },\n});\n\n// 发起请求\nconst userInfo = await request.Get('/user/info');\nconst result = await request.Post('/user/update', {\n  body: { name: '张三', age: 25 },\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"双重调用模式",children:["双重调用模式",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#双重调用模式",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { createDualCallInstance } from '@bubblesjs/request';\n\n// 创建双重调用实例工厂\nconst requestFactory = createDualCallInstance({\n  baseUrl: '/api',\n  isShowSuccessMessage: false, // 默认不显示成功消息\n  successMessageFunc: (msg) => alert(msg),\n  errorMessageFunc: (msg) => console.error(msg),\n});\n\n// 使用默认配置\nconst data1 = await requestFactory().Get('/user/list');\n\n// 临时覆盖配置 - 显示成功消息\nconst data2 = await requestFactory({\n  isShowSuccessMessage: true,\n}).Post('/user/create', {\n  body: { name: '李四' },\n});\n\n// 也可以直接调用 HTTP 方法\nconst data3 = await requestFactory.Get('/user/profile');\nconst data4 = await requestFactory.Post('/user/settings', {\n  body: { theme: 'dark' },\n});\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"api-文档",children:["API 文档",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#api-文档",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"createinstanceoption",children:["createInstance(option)",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#createinstanceoption",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"创建一个标准的 Alova 请求实例。"}),"\n",(0,r.jsxs)(n.h4,{id:"参数",children:["参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参数",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"option"}),": ",(0,r.jsx)(n.code,{children:"requestOption"})," - 配置选项"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"配置选项",children:["配置选项",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置选项",children:"#"})]}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"参数"}),"\n",(0,r.jsx)(n.th,{children:"类型"}),"\n",(0,r.jsx)(n.th,{children:"默认值"}),"\n",(0,r.jsx)(n.th,{children:"说明"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"baseUrl"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'/'"})}),"\n",(0,r.jsx)(n.td,{children:"基础 URL"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"timeout"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"0"})}),"\n",(0,r.jsx)(n.td,{children:"超时时间（毫秒），0 表示无超时"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"commonHeaders"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Record<string, string | (() => string)>"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{}"})}),"\n",(0,r.jsx)(n.td,{children:"公共请求头，支持函数动态获取"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"statusMap"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"statusMap"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{success: 200, unAuthorized: 401}"})}),"\n",(0,r.jsx)(n.td,{children:"HTTP 状态码映射"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"codeMap"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"codeMap"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"{success: [200], unAuthorized: [401]}"})}),"\n",(0,r.jsx)(n.td,{children:"业务状态码映射"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"responseDataKey"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'data'"})}),"\n",(0,r.jsx)(n.td,{children:"响应数据字段名"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"responseMessageKey"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'message'"})}),"\n",(0,r.jsx)(n.td,{children:"响应消息字段名"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"isTransformResponse"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})}),"\n",(0,r.jsx)(n.td,{children:"是否启用响应转换"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"isShowSuccessMessage"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"false"})}),"\n",(0,r.jsx)(n.td,{children:"是否显示成功消息"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"successDefaultMessage"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'操作成功'"})}),"\n",(0,r.jsx)(n.td,{children:"默认成功消息"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"isShowErrorMessage"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})}),"\n",(0,r.jsx)(n.td,{children:"是否显示错误消息"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"errorDefaultMessage"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'服务异常'"})}),"\n",(0,r.jsx)(n.td,{children:"默认错误消息"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"successMessageFunc"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"(message: string) => void"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"undefined"})}),"\n",(0,r.jsx)(n.td,{children:"成功消息处理函数"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"errorMessageFunc"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"(message: string) => void"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"undefined"})}),"\n",(0,r.jsx)(n.td,{children:"错误消息处理函数"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"unAuthorizedResponseFunc"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"() => void"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"undefined"})}),"\n",(0,r.jsx)(n.td,{children:"未授权处理函数"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"requestAdapter"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"AlovaRequestAdapter"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"adapterFetch()"})}),"\n",(0,r.jsx)(n.td,{children:"请求适配器"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"statesHook"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"StatesHook"})}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"undefined"})}),"\n",(0,r.jsx)(n.td,{children:"状态钩子（用于框架集成）"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"返回值",children:["返回值",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#返回值",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"返回配置好的 Alova 实例，支持以下 HTTP 方法："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Get(url, config?)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Post(url, config?)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Put(url, config?)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Delete(url, config?)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Patch(url, config?)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Head(url, config?)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Options(url, config?)"})}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"createdualcallinstancebaseconfig",children:["createDualCallInstance(baseConfig)",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#createdualcallinstancebaseconfig",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"创建支持双重调用模式的请求实例工厂。"}),"\n",(0,r.jsxs)(n.h4,{id:"参数-1",children:["参数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参数-1",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"baseConfig"}),": ",(0,r.jsx)(n.code,{children:"baseRequestOption<AlovaGenerics>"})," - 基础配置"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"返回值-1",children:["返回值",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#返回值-1",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"返回一个函数，该函数："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"无参数调用时返回默认实例"}),"\n",(0,r.jsxs)(n.li,{children:["传入 ",(0,r.jsx)(n.code,{children:"CustomConfig"})," 时返回合并配置后的新实例"]}),"\n",(0,r.jsx)(n.li,{children:"直接绑定了所有 HTTP 方法到默认实例"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// 返回的函数类型签名\ninterface DualCallInstance {\n  (): AlovaInstance; // 无参数调用\n  (option: CustomConfig): AlovaInstance; // 带配置调用\n\n  // 直接绑定的 HTTP 方法\n  Get: AlovaInstance['Get'];\n  Post: AlovaInstance['Post'];\n  Put: AlovaInstance['Put'];\n  Delete: AlovaInstance['Delete'];\n  Patch: AlovaInstance['Patch'];\n  Head: AlovaInstance['Head'];\n  Options: AlovaInstance['Options'];\n  Request: AlovaInstance['Request'];\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"使用场景",children:["使用场景",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用场景",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"1-基础项目配置",children:["1. 基础项目配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-基础项目配置",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { createInstance } from '@bubblesjs/request';\n\nconst request = createInstance({\n  baseUrl: process.env.REACT_APP_API_BASE_URL,\n  timeout: 10000,\n  commonHeaders: {\n    'X-Client-Version': '1.0.0',\n  },\n});\n\n// 导出供全局使用\nexport default request;\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"2-带认证的请求",children:["2. 带认证的请求",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-带认证的请求",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { createInstance } from '@bubblesjs/request';\n\nconst authRequest = createInstance({\n  baseUrl: '/api',\n  commonHeaders: {\n    Authorization: () => {\n      const token = localStorage.getItem('authToken');\n      return token ? `Bearer ${token}` : '';\n    },\n  },\n  unAuthorizedResponseFunc: () => {\n    // 清除本地认证信息\n    localStorage.removeItem('authToken');\n    // 跳转到登录页\n    window.location.href = '/login';\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"3-业务特定配置",children:["3. 业务特定配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-业务特定配置",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { createDualCallInstance } from '@bubblesjs/request';\n\n// 创建用户模块请求工厂\nconst userRequestFactory = createDualCallInstance({\n  baseUrl: '/api/user',\n  statusMap: {\n    success: 200,\n    unAuthorized: 401,\n  },\n  codeMap: {\n    success: [200, 201],\n    unAuthorized: [401, 403],\n  },\n});\n\n// 静默获取用户列表\nconst getUserList = () =>\n  userRequestFactory({\n    isShowSuccessMessage: false,\n    isShowErrorMessage: false,\n  }).Get('/list');\n\n// 创建用户时显示成功消息\nconst createUser = (userData) =>\n  userRequestFactory({\n    isShowSuccessMessage: true,\n  }).Post('/create', { body: userData });\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"4-文件上传配置",children:["4. 文件上传配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-文件上传配置",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { createInstance } from '@bubblesjs/request';\n\nconst uploadRequest = createInstance({\n  baseUrl: '/api/upload',\n  timeout: 60000, // 60秒超时\n  isTransformResponse: false, // 不转换响应，保留完整响应信息\n  successMessageFunc: (msg) => {\n    console.log('上传成功:', msg);\n  },\n});\n\n// 上传文件\nconst uploadFile = async (file: File) => {\n  const formData = new FormData();\n  formData.append('file', file);\n\n  return await uploadRequest.Post('/file', {\n    body: formData,\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n};\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"5-不同环境配置",children:["5. 不同环境配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-不同环境配置",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { createInstance } from '@bubblesjs/request';\n\nconst createEnvironmentRequest = (env: 'dev' | 'prod' | 'test') => {\n  const config = {\n    dev: {\n      baseUrl: 'http://localhost:3000/api',\n      isShowSuccessMessage: true, // 开发环境显示详细信息\n      isShowErrorMessage: true,\n    },\n    test: {\n      baseUrl: 'https://test-api.example.com/api',\n      isShowSuccessMessage: false,\n      isShowErrorMessage: true,\n    },\n    prod: {\n      baseUrl: 'https://api.example.com/api',\n      isShowSuccessMessage: false,\n      isShowErrorMessage: false, // 生产环境静默处理错误\n    },\n  };\n\n  return createInstance(config[env]);\n};\n\n// 根据环境创建请求实例\nconst request = createEnvironmentRequest(process.env.NODE_ENV as any);\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"高级用法",children:["高级用法",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#高级用法",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"1-自定义适配器",children:["1. 自定义适配器",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-自定义适配器",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { createInstance } from '@bubblesjs/request';\nimport { axiosRequestAdapter } from 'alova/axios';\nimport axios from 'axios';\n\nconst customRequest = createInstance({\n  baseUrl: '/api',\n  requestAdapter: axiosRequestAdapter(), // 使用 axios 适配器\n  timeout: 15000,\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"2-响应拦截和数据转换",children:["2. 响应拦截和数据转换",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-响应拦截和数据转换",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { createInstance } from '@bubblesjs/request';\n\nconst request = createInstance({\n  baseUrl: '/api',\n  responseDataKey: 'result', // 自定义数据字段\n  responseMessageKey: 'msg', // 自定义消息字段\n  codeMap: {\n    success: [0, 200, 201], // 多个成功状态码\n    unAuthorized: [401, 40001, 40002], // 多个未授权状态码\n  },\n  isTransformResponse: true, // 自动提取数据字段\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"3-集成-reactvue-状态管理",children:["3. 集成 React/Vue 状态管理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-集成-reactvue-状态管理",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// React 示例\nimport { createInstance } from '@bubblesjs/request';\nimport { ReactHook } from 'alova/react';\n// Vue 示例\nimport { VueHook } from 'alova/vue';\n\nconst reactRequest = createInstance({\n  baseUrl: '/api',\n  statesHook: ReactHook, // 集成 React 状态管理\n});\n\nconst vueRequest = createInstance({\n  baseUrl: '/api',\n  statesHook: VueHook, // 集成 Vue 状态管理\n});\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"错误处理",children:["错误处理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#错误处理",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"错误处理流程",children:["错误处理流程",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#错误处理流程",children:"#"})]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HTTP 状态码检查"}),"：首先检查 HTTP 状态码是否为成功状态"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"业务状态码检查"}),"：然后检查响应体中的业务状态码"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"未授权处理"}),"：特殊处理未授权情况"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"错误消息显示"}),"：根据配置显示错误消息"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"自定义错误处理",children:["自定义错误处理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义错误处理",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { createInstance } from '@bubblesjs/request';\n\nconst request = createInstance({\n  baseUrl: '/api',\n  errorMessageFunc: (message) => {\n    // 自定义错误消息处理\n    if (message.includes('网络')) {\n      showNetworkErrorDialog();\n    } else {\n      showGeneralErrorToast(message);\n    }\n  },\n  unAuthorizedResponseFunc: () => {\n    // 自定义未授权处理\n    clearUserData();\n    redirectToLogin();\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"类型定义",children:["类型定义",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类型定义",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// 基础配置接口\ninterface baseRequestOption<AG extends AlovaGenerics> {\n  baseUrl?: string;\n  timeout?: number;\n  commonHeaders?: Record<string, string | (() => string)>;\n  statusMap?: statusMap;\n  codeMap?: codeMap;\n  responseDataKey?: string;\n  responseMessageKey?: string;\n  isTransformResponse?: boolean;\n  isShowSuccessMessage?: boolean;\n  successDefaultMessage?: string;\n  isShowErrorMessage?: boolean;\n  errorDefaultMessage?: string;\n  statesHook?: AlovaOptions<AG>['statesHook'];\n  successMessageFunc?: (message: string) => void;\n  errorMessageFunc?: (message: string) => void;\n  unAuthorizedResponseFunc?: () => void;\n  requestAdapter?: AlovaOptions<AG>['requestAdapter'];\n}\n\n// 自定义配置接口（用于双重调用）\ninterface CustomConfig {\n  isTransformResponse?: boolean;\n  isShowSuccessMessage?: boolean;\n  isShowErrorMessage?: boolean;\n}\n\n// 状态码映射\ninterface statusMap {\n  success?: number;\n  unAuthorized?: number;\n}\n\n// 业务码映射\ninterface codeMap {\n  success?: number[];\n  unAuthorized?: number[];\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"最佳实践",children:["最佳实践",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#最佳实践",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"1-统一错误处理",children:["1. 统一错误处理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-统一错误处理",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// error-handler.ts\nexport const handleApiError = (message: string) => {\n  // 根据错误类型做不同处理\n  if (message.includes('网络')) {\n    toast.error('网络连接异常，请检查网络设置')\n  } else if (message.includes('服务器')) {\n    toast.error('服务器繁忙，请稍后重试')\n  } else {\n    toast.error(message)\n  }\n}\n\nexport const handleUnauthorized = () => {\n  // 清除用户状态\n  useUserStore.getState().logout()\n  // 跳转登录页\n  navigate('/login')\n}\n\n// request.ts\nimport { createInstance } from '@bubblesjs/request'\nimport { handleApiError, handleUnauthorized } from './error-handler'\n\nexport const request = createInstance({\n  baseUrl: '/api',\n  errorMessageFunc: handleApiError,\n  unAuthorizedResponseFunc: handleUnauthorized\n})\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"2-模块化请求配置",children:["2. 模块化请求配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-模块化请求配置",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// api/base.ts\nimport { createDualCallInstance } from '@bubblesjs/request'\n\nexport const createModuleRequest = (module: string) => {\n  return createDualCallInstance({\n    baseUrl: `/api/${module}`,\n    commonHeaders: {\n      'X-Module': module\n    }\n  })\n}\n\n// api/user.ts\nimport { createModuleRequest } from './base'\n\nconst userRequest = createModuleRequest('user')\n\nexport const userApi = {\n  getProfile: () => userRequest.Get('/profile'),\n  updateProfile: (data) => userRequest({\n    isShowSuccessMessage: true\n  }).Put('/profile', { body: data }),\n  deleteAccount: () => userRequest({\n    isShowSuccessMessage: true,\n    successDefaultMessage: '账户删除成功'\n  }).Delete('/account')\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"3-类型安全的-api-调用",children:["3. 类型安全的 API 调用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-类型安全的-api-调用",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// api/typed-request.ts\nimport { createInstance } from '@bubblesjs/request';\n\n// types/api.ts\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\ninterface ApiResponse<T> {\n  code: number;\n  data: T;\n  message: string;\n}\n\nconst typedRequest = createInstance({\n  baseUrl: '/api',\n  isTransformResponse: true,\n});\n\n// 类型安全的 API 函数\nexport const getUserById = async (id: number): Promise<User> => {\n  return await typedRequest.Get(`/user/${id}`);\n};\n\nexport const createUser = async (userData: Omit<User, 'id'>): Promise<User> => {\n  return await typedRequest.Post('/user', { body: userData });\n};\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"迁移指南",children:["迁移指南",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#迁移指南",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"从-axios-迁移",children:["从 Axios 迁移",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#从-axios-迁移",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"如果你之前使用原生 Axios，可以这样迁移："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// 之前的 Axios 配置\nconst axiosInstance = axios.create({\n  baseURL: '/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 迁移到 @bubblesjs/request\nconst request = createInstance({\n  baseUrl: '/api', // 注意：这里是 baseUrl 不是 baseURL\n  timeout: 10000,\n  commonHeaders: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// API 调用方式基本相同\n// 之前：await axiosInstance.get('/user')\n// 现在：await request.Get('/user')\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"从其他请求库迁移",children:["从其他请求库迁移",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#从其他请求库迁移",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"@bubblesjs/request 提供了灵活的适配器系统，可以轻松集成现有的请求解决方案。"}),"\n",(0,r.jsxs)(n.h2,{id:"常见问题",children:["常见问题",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#常见问题",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"q-如何处理文件下载",children:["Q: 如何处理文件下载？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#q-如何处理文件下载",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["A: 可以通过设置 ",(0,r.jsx)(n.code,{children:"isTransformResponse: false"})," 来获取完整响应："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const downloadRequest = createInstance({\n  baseUrl: '/api',\n  isTransformResponse: false,\n});\n\nconst downloadFile = async (fileId: string) => {\n  const response = await downloadRequest.Get(`/download/${fileId}`);\n  // 处理文件下载逻辑\n  const blob = await response.blob();\n  const url = window.URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = 'filename.pdf';\n  a.click();\n};\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"q-如何实现请求重试",children:["Q: 如何实现请求重试？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#q-如何实现请求重试",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"A: 可以结合 Alova 的重试功能："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { createInstance } from '@bubblesjs/request';\n\nconst request = createInstance({\n  baseUrl: '/api',\n});\n\n// 使用时添加重试配置\nconst dataWithRetry = await request.Get('/unstable-api', {\n  retry: 3, // 重试 3 次\n  retryDelay: 1000, // 重试间隔 1 秒\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"q-如何实现请求缓存",children:["Q: 如何实现请求缓存？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#q-如何实现请求缓存",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"A: Alova 内置了强大的缓存功能："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// 缓存 5 分钟\nconst cachedData = await request.Get('/user/profile', {\n  hitSource: 'cache',\n  cacheFor: 5 * 60 * 1000, // 5 分钟\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"q-如何集成-loading-状态",children:["Q: 如何集成 Loading 状态？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#q-如何集成-loading-状态",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"A: 使用 Alova 的状态钩子功能："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// React 示例\nimport { useRequest } from 'alova/react'\n\nconst UserProfile = () => {\n  const {\n    loading,\n    data,\n    error,\n    send\n  } = useRequest(() => request.Get('/user/profile'), {\n    immediate: true\n  })\n\n  if (loading) return <div>Loading...</div>\n  if (error) return <div>Error: {error.message}</div>\n\n  return <div>User: {data.name}</div>\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"@bubblesjs/request 提供了现代化、类型安全、功能丰富的请求解决方案。通过灵活的配置选项和双重调用模式，可以满足从简单到复杂的各种请求场景需求。"})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}let i=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["zh%2Fpackages%2Frequest.mdx"]={toc:[{text:"特性",id:"特性",depth:2},{text:"安装",id:"安装",depth:2},{text:"快速开始",id:"快速开始",depth:2},{text:"基础使用",id:"基础使用",depth:3},{text:"双重调用模式",id:"双重调用模式",depth:3},{text:"API 文档",id:"api-文档",depth:2},{text:"createInstance(option)",id:"createinstanceoption",depth:3},{text:"参数",id:"参数",depth:4},{text:"配置选项",id:"配置选项",depth:4},{text:"返回值",id:"返回值",depth:4},{text:"createDualCallInstance(baseConfig)",id:"createdualcallinstancebaseconfig",depth:3},{text:"参数",id:"参数-1",depth:4},{text:"返回值",id:"返回值-1",depth:4},{text:"使用场景",id:"使用场景",depth:2},{text:"1. 基础项目配置",id:"1-基础项目配置",depth:3},{text:"2. 带认证的请求",id:"2-带认证的请求",depth:3},{text:"3. 业务特定配置",id:"3-业务特定配置",depth:3},{text:"4. 文件上传配置",id:"4-文件上传配置",depth:3},{text:"5. 不同环境配置",id:"5-不同环境配置",depth:3},{text:"高级用法",id:"高级用法",depth:2},{text:"1. 自定义适配器",id:"1-自定义适配器",depth:3},{text:"2. 响应拦截和数据转换",id:"2-响应拦截和数据转换",depth:3},{text:"3. 集成 React/Vue 状态管理",id:"3-集成-reactvue-状态管理",depth:3},{text:"错误处理",id:"错误处理",depth:2},{text:"错误处理流程",id:"错误处理流程",depth:3},{text:"自定义错误处理",id:"自定义错误处理",depth:3},{text:"类型定义",id:"类型定义",depth:2},{text:"最佳实践",id:"最佳实践",depth:2},{text:"1. 统一错误处理",id:"1-统一错误处理",depth:3},{text:"2. 模块化请求配置",id:"2-模块化请求配置",depth:3},{text:"3. 类型安全的 API 调用",id:"3-类型安全的-api-调用",depth:3},{text:"迁移指南",id:"迁移指南",depth:2},{text:"从 Axios 迁移",id:"从-axios-迁移",depth:3},{text:"从其他请求库迁移",id:"从其他请求库迁移",depth:3},{text:"常见问题",id:"常见问题",depth:2},{text:"Q: 如何处理文件下载？",id:"q-如何处理文件下载",depth:3},{text:"Q: 如何实现请求重试？",id:"q-如何实现请求重试",depth:3},{text:"Q: 如何实现请求缓存？",id:"q-如何实现请求缓存",depth:3},{text:"Q: 如何集成 Loading 状态？",id:"q-如何集成-loading-状态",depth:3},{text:"总结",id:"总结",depth:2}],title:"@bubblesjs/request",headingTitle:"@bubblesjs/request",frontmatter:{}}}}]);