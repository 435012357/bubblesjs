"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["20"],{8729:function(e,n,s){s.r(n),s.d(n,{default:()=>l});var r=s(651),a=s(6971),d=s(6755);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code",h3:"h3",h4:"h4",strong:"strong",ul:"ul",li:"li",ol:"ol"},(0,a.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"bubblesjsutils",children:["@bubblesjs/utils",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#bubblesjsutils",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"提供实用的工具函数集合，包含通用工具方法和类型工具。"}),"\n",(0,r.jsxs)(n.h2,{id:"安装",children:["安装",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装",children:"#"})]}),"\n","\n",(0,r.jsxs)(d.mQ,{children:[(0,r.jsx)(d.OK,{label:"pnpm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pnpm add @bubblesjs/utils\n"})})}),(0,r.jsx)(d.OK,{label:"npm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install @bubblesjs/utils\n"})})}),(0,r.jsx)(d.OK,{label:"yarn",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"yarn add @bubblesjs/utils\n"})})}),(0,r.jsx)(d.OK,{label:"bun",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bun add @bubblesjs/utils\n"})})})]}),"\n",(0,r.jsxs)(n.h2,{id:"快速使用",children:["快速使用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#快速使用",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { deepMergeObject, isReadableStream } from '@bubblesjs/utils';\n\n// 深度合并对象\nconst merged = deepMergeObject({ a: 1, b: { c: 2 } }, { b: { d: 3 }, e: 4 });\n// 结果: { a: 1, b: { c: 2, d: 3 }, e: 4 }\n\n// 检查是否为可读流\nconst isStream = isReadableStream(response.body);\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"api-文档",children:["API 文档",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#api-文档",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"通用工具函数",children:["通用工具函数",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#通用工具函数",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"deepmergeobjecttarget-source",children:["deepMergeObject(target, source)",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#deepmergeobjecttarget-source",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"深度合并两个对象，支持嵌套对象的递归合并。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"参数："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"target"}),": ",(0,r.jsx)(n.code,{children:"object"})," - 目标对象"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"source"}),": ",(0,r.jsx)(n.code,{children:"object"})," - 源对象"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"返回值："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"object"})," - 合并后的新对象"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"示例："})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { deepMergeObject } from '@bubblesjs/utils';\n\nconst target = {\n  user: {\n    name: 'Alice',\n    settings: {\n      theme: 'light',\n    },\n  },\n  version: '1.0.0',\n};\n\nconst source = {\n  user: {\n    age: 25,\n    settings: {\n      language: 'zh-CN',\n    },\n  },\n  features: ['dark-mode'],\n};\n\nconst result = deepMergeObject(target, source);\n// 结果:\n// {\n//   user: {\n//     name: 'Alice',\n//     age: 25,\n//     settings: {\n//       theme: 'light',\n//       language: 'zh-CN'\n//     }\n//   },\n//   version: '1.0.0',\n//   features: ['dark-mode']\n// }\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"注意事项："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"数组会被整体替换，不会进行元素级合并"}),"\n",(0,r.jsx)(n.li,{children:"函数、Date、RegExp 等特殊对象会被直接赋值"}),"\n",(0,r.jsx)(n.li,{children:"源对象的属性会覆盖目标对象的同名属性"}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"isreadablestreamobj",children:["isReadableStream(obj)",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isreadablestreamobj",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"检查对象是否为可读流（ReadableStream）。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"参数："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"obj"}),": ",(0,r.jsx)(n.code,{children:"any"})," - 要检查的对象"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"返回值："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"boolean"})," - 如果是可读流返回 true，否则返回 false"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"示例："})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { isReadableStream } from '@bubblesjs/utils';\n\n// 检查 fetch 响应体\nconst response = await fetch('/api/data');\nif (isReadableStream(response.body)) {\n  // 处理流式响应\n  const data = await response.json();\n} else {\n  // 处理普通响应\n  const data = response.body;\n}\n\n// 检查自定义流\nconst customStream = new ReadableStream({\n  start(controller) {\n    controller.enqueue('Hello');\n    controller.close();\n  },\n});\n\nconsole.log(isReadableStream(customStream)); // true\nconsole.log(isReadableStream({})); // false\nconsole.log(isReadableStream(null)); // false\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"使用场景："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"区分不同类型的响应体"}),"\n",(0,r.jsx)(n.li,{children:"条件性地处理流式数据"}),"\n",(0,r.jsx)(n.li,{children:"适配器兼容性检查"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"使用场景",children:["使用场景",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用场景",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"1-配置对象合并",children:["1. 配置对象合并",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-配置对象合并",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { deepMergeObject } from '@bubblesjs/utils';\n\n// 默认配置\nconst defaultConfig = {\n  api: {\n    baseUrl: '/api',\n    timeout: 5000,\n  },\n  ui: {\n    theme: 'light',\n    language: 'en',\n  },\n};\n\n// 用户配置\nconst userConfig = {\n  api: {\n    timeout: 10000,\n  },\n  ui: {\n    theme: 'dark',\n  },\n};\n\n// 合并配置\nconst finalConfig = deepMergeObject(defaultConfig, userConfig);\n// 结果保留了所有默认配置，同时应用了用户的覆盖设置\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"2-响应处理适配",children:["2. 响应处理适配",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-响应处理适配",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { isReadableStream } from '@bubblesjs/utils';\n\nconst handleResponse = async (response) => {\n  // 根据响应体类型进行不同处理\n  if (response?.body && isReadableStream(response.body)) {\n    // Fetch API 的流式响应\n    return await response.json();\n  } else {\n    // 其他适配器的直接响应\n    return response.data;\n  }\n};\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"3-组件属性合并",children:["3. 组件属性合并",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-组件属性合并",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { deepMergeObject } from '@bubblesjs/utils'\n\n// React 组件示例\nconst Button = ({ className, style, ...props }) => {\n  const defaultStyle = {\n    padding: '8px 16px',\n    border: 'none',\n    borderRadius: '4px'\n  }\n\n  const mergedStyle = deepMergeObject(defaultStyle, style || {})\n\n  return (\n    <button\n      className={`btn ${className || ''}`}\n      style={mergedStyle}\n      {...props}\n    />\n  )\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"类型定义",children:["类型定义",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类型定义",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// 深度合并函数类型\nfunction deepMergeObject<T extends object, U extends object>(target: T, source: U): T & U;\n\n// 可读流检查函数类型\nfunction isReadableStream(obj: any): obj is ReadableStream;\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"实现原理",children:["实现原理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实现原理",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"deepmergeobject-实现原理",children:["deepMergeObject 实现原理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#deepmergeobject-实现原理",children:"#"})]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"递归合并"}),"：对于对象类型的属性，递归调用合并函数"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型检查"}),"：区分普通对象、数组、函数等不同类型"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"安全复制"}),"：避免引用共享，确保合并后的对象独立"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"isreadablestream-实现原理",children:["isReadableStream 实现原理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isreadablestream-实现原理",children:"#"})]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型检查"}),"：检查对象是否存在且为对象类型"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"特征检测"}),"：检查是否具有 ReadableStream 的特征属性和方法"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"兼容性"}),"：支持不同环境下的 ReadableStream 实现"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"最佳实践",children:["最佳实践",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#最佳实践",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"1-配置管理",children:["1. 配置管理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-配置管理",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { deepMergeObject } from '@bubblesjs/utils';\n\nclass ConfigManager {\n  private defaultConfig: Record<string, any>;\n\n  constructor(defaultConfig: Record<string, any>) {\n    this.defaultConfig = defaultConfig;\n  }\n\n  merge(userConfig: Record<string, any>) {\n    return deepMergeObject(this.defaultConfig, userConfig);\n  }\n\n  // 支持多层合并\n  mergeMultiple(...configs: Record<string, any>[]) {\n    return configs.reduce((acc, config) => deepMergeObject(acc, config), this.defaultConfig);\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"2-响应适配器",children:["2. 响应适配器",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-响应适配器",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { isReadableStream } from '@bubblesjs/utils';\n\nclass ResponseAdapter {\n  static async parse(response: any) {\n    // 统一的响应解析逻辑\n    if (response?.body && isReadableStream(response.body)) {\n      try {\n        return await response.json();\n      } catch (error) {\n        return await response.text();\n      }\n    }\n\n    return response.data || response;\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"3-工具函数组合",children:["3. 工具函数组合",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-工具函数组合",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { deepMergeObject, isReadableStream } from '@bubblesjs/utils';\n\n// 创建一个通用的数据处理工具\nconst createDataProcessor = (defaultOptions = {}) => {\n  return {\n    process: async (data: any, options = {}) => {\n      const mergedOptions = deepMergeObject(defaultOptions, options);\n\n      if (isReadableStream(data)) {\n        // 处理流式数据\n        const reader = data.getReader();\n        // ... 流处理逻辑\n      }\n\n      // 处理普通数据\n      return processWithOptions(data, mergedOptions);\n    },\n  };\n};\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"常见问题",children:["常见问题",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#常见问题",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"q-deepmergeobject-会修改原对象吗",children:["Q: deepMergeObject 会修改原对象吗？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#q-deepmergeobject-会修改原对象吗",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["A: 不会。",(0,r.jsx)(n.code,{children:"deepMergeObject"})," 会创建一个新对象，不会修改传入的原对象。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const original = { a: 1, b: { c: 2 } };\nconst source = { b: { d: 3 } };\nconst result = deepMergeObject(original, source);\n\nconsole.log(original); // { a: 1, b: { c: 2 } } - 未被修改\nconsole.log(result); // { a: 1, b: { c: 2, d: 3 } } - 新对象\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"q-如何处理数组合并",children:["Q: 如何处理数组合并？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#q-如何处理数组合并",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"A: 当前实现中，数组会被整体替换。如果需要数组元素合并，可以自定义处理："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const customMerge = (target, source) => {\n  const result = deepMergeObject(target, source);\n\n  // 自定义数组合并逻辑\n  if (Array.isArray(target.items) && Array.isArray(source.items)) {\n    result.items = [...target.items, ...source.items];\n  }\n\n  return result;\n};\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"q-isreadablestream-支持哪些环境",children:["Q: isReadableStream 支持哪些环境？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#q-isreadablestream-支持哪些环境",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"A: 支持现代浏览器和 Node.js 环境中的 ReadableStream。对于不支持的环境，会安全地返回 false。"}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"@bubblesjs/utils 提供了实用的工具函数，特别适合以下场景："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"配置管理"}),"：使用 ",(0,r.jsx)(n.code,{children:"deepMergeObject"})," 进行灵活的配置合并"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"响应处理"}),"：使用 ",(0,r.jsx)(n.code,{children:"isReadableStream"})," 适配不同的响应类型"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"数据处理"}),"：在各种数据操作场景中提供可靠的工具支持"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"这些工具函数经过充分测试，可以安全地用于生产环境。"})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}let l=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["zh%2Fpackages%2Futils.mdx"]={toc:[{text:"安装",id:"安装",depth:2},{text:"快速使用",id:"快速使用",depth:2},{text:"API 文档",id:"api-文档",depth:2},{text:"通用工具函数",id:"通用工具函数",depth:3},{text:"deepMergeObject(target, source)",id:"deepmergeobjecttarget-source",depth:4},{text:"isReadableStream(obj)",id:"isreadablestreamobj",depth:4},{text:"使用场景",id:"使用场景",depth:2},{text:"1. 配置对象合并",id:"1-配置对象合并",depth:3},{text:"2. 响应处理适配",id:"2-响应处理适配",depth:3},{text:"3. 组件属性合并",id:"3-组件属性合并",depth:3},{text:"类型定义",id:"类型定义",depth:2},{text:"实现原理",id:"实现原理",depth:2},{text:"deepMergeObject 实现原理",id:"deepmergeobject-实现原理",depth:3},{text:"isReadableStream 实现原理",id:"isreadablestream-实现原理",depth:3},{text:"最佳实践",id:"最佳实践",depth:2},{text:"1. 配置管理",id:"1-配置管理",depth:3},{text:"2. 响应适配器",id:"2-响应适配器",depth:3},{text:"3. 工具函数组合",id:"3-工具函数组合",depth:3},{text:"常见问题",id:"常见问题",depth:2},{text:"Q: deepMergeObject 会修改原对象吗？",id:"q-deepmergeobject-会修改原对象吗",depth:3},{text:"Q: 如何处理数组合并？",id:"q-如何处理数组合并",depth:3},{text:"Q: isReadableStream 支持哪些环境？",id:"q-isreadablestream-支持哪些环境",depth:3},{text:"总结",id:"总结",depth:2}],title:"@bubblesjs/utils",headingTitle:"@bubblesjs/utils",frontmatter:{}}}}]);